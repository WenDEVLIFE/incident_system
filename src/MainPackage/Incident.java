 package MainPackage;


//import static ResultTable.Student_Id;
import SomeFunctions.MyConnection;
import java.awt.Color;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static SomeFunctions.Helper.AlreadyExist;
import static SomeFunctions.Helper.incidentExist;
import java.sql.Connection;
import java.sql.Date;
import java.sql.SQLException;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.StudentModel;
/**
 *
 * @author Hadi
 */
public class Incident extends javax.swing.JFrame {
    
     DefaultTableModel model;
    List <StudentModel> studentList = new ArrayList<>();
    PreparedStatement ps;
        ResultSet rs;
        
        String gender;
    private Object jTextGender;
    private Object jTableGenderName;
    private Object jTextName;
    public Incident() {
        initComponents();
        
        String [] colums ={"No", "Type-of-Incident", "First-Name", "L-Name", "Gender",  "Time" ,"Date", "Involved", "Location"};
        model = new DefaultTableModel(colums, 0);
        jTableIncidentName.setModel(model);
        populateStudentTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jRadioButtonF = new javax.swing.JRadioButton();
        jRadioButtonM = new javax.swing.JRadioButton();
        jTextLName = new javax.swing.JTextField();
        jTextFName = new javax.swing.JTextField();
        jTextIncident = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaLocation = new javax.swing.JTextArea();
        jButtonAdd = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonRegister = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableIncidentName = new javax.swing.JTable();
        jTextFieldSearch = new javax.swing.JTextField();
        jTextDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextInvolved = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextTime = new javax.swing.JTextField();
        jButtonEdit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 3));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("First Name: ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Last Name: ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Time:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, 260, 180, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Date:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(-30, 300, 160, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Involved:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 110, 30));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Location:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, -1, 30));

        jRadioButtonF.setBackground(new java.awt.Color(0, 51, 51));
        buttonGroup1.add(jRadioButtonF);
        jRadioButtonF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRadioButtonF.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonF.setText("Female");
        jRadioButtonF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFActionPerformed(evt);
            }
        });
        jPanel1.add(jRadioButtonF, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 220, -1, -1));

        jRadioButtonM.setBackground(new java.awt.Color(0, 51, 51));
        buttonGroup1.add(jRadioButtonM);
        jRadioButtonM.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRadioButtonM.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonM.setText("Male");
        jRadioButtonM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMActionPerformed(evt);
            }
        });
        jPanel1.add(jRadioButtonM, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 220, -1, -1));
        jPanel1.add(jTextLName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, 180, 30));

        jTextFName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFNameActionPerformed(evt);
            }
        });
        jPanel1.add(jTextFName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 180, 30));

        jTextIncident.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextIncidentActionPerformed(evt);
            }
        });
        jTextIncident.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextIncidentKeyTyped(evt);
            }
        });
        jPanel1.add(jTextIncident, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, 210, 30));

        jTextAreaLocation.setColumns(20);
        jTextAreaLocation.setRows(5);
        jScrollPane1.setViewportView(jTextAreaLocation);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 390, 220, 80));

        jButtonAdd.setBackground(new java.awt.Color(254, 254, 254));
        jButtonAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonAdd.setForeground(new java.awt.Color(17, 17, 17));
        jButtonAdd.setText("Delete");
        jButtonAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonAddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonAddMouseExited(evt);
            }
        });
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 580, 90, 39));

        jButtonUpdate.setBackground(new java.awt.Color(238, 238, 238));
        jButtonUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonUpdate.setForeground(new java.awt.Color(19, 19, 19));
        jButtonUpdate.setText("Update");
        jButtonUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonUpdateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonUpdateMouseExited(evt);
            }
        });
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 580, 90, 40));

        jButtonRegister.setBackground(new java.awt.Color(254, 254, 254));
        jButtonRegister.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonRegister.setForeground(new java.awt.Color(17, 17, 17));
        jButtonRegister.setText("Register");
        jButtonRegister.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonRegister.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonRegisterMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonRegisterMouseExited(evt);
            }
        });
        jButtonRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegisterActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonRegister, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 580, 100, 39));

        jTableIncidentName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableIncidentName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTableIncidentName.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "TypeofIncident", "FName", "LName", "Gender", "Time", "Date", "Involved", "Location"
            }
        ));
        jTableIncidentName.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTableIncidentName.setIntercellSpacing(new java.awt.Dimension(2, 2));
        jTableIncidentName.setName(""); // NOI18N
        jTableIncidentName.setSelectionBackground(new java.awt.Color(0, 0, 0));
        jTableIncidentName.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTableIncidentNameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane2.setViewportView(jTableIncidentName);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 150, 770, 470));

        jTextFieldSearch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextFieldSearch.setForeground(new java.awt.Color(153, 153, 153));
        jTextFieldSearch.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldSearch.setText("search");
        jTextFieldSearch.setToolTipText("");
        jTextFieldSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldSearchFocusLost(evt);
            }
        });
        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });
        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyReleased(evt);
            }
        });
        jPanel1.add(jTextFieldSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 90, 420, 40));
        jPanel1.add(jTextDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 300, 190, 30));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Gender:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 90, -1));

        jTextInvolved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextInvolvedActionPerformed(evt);
            }
        });
        jTextInvolved.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextInvolvedKeyTyped(evt);
            }
        });
        jPanel1.add(jTextInvolved, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 340, 190, 30));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 990, 10));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 33)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Incident Report Logging");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 410, 50));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Type of Incident:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 160, 30));

        jTextTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextTimeActionPerformed(evt);
            }
        });
        jPanel1.add(jTextTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 260, 190, 30));

        jButtonEdit.setBackground(new java.awt.Color(254, 254, 254));
        jButtonEdit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonEdit.setForeground(new java.awt.Color(21, 21, 21));
        jButtonEdit.setText("Edit");
        jButtonEdit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonEditMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonEditMouseExited(evt);
            }
        });
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 580, 80, 39));

        getContentPane().add(jPanel1, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMActionPerformed
        // TODO add your handling code here:
        gender="Male";
    }//GEN-LAST:event_jRadioButtonMActionPerformed

    private void jTextIncidentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextIncidentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextIncidentActionPerformed

    private void jTextIncidentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextIncidentKeyTyped
        
    }//GEN-LAST:event_jTextIncidentKeyTyped

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed

      if (jTableIncidentName.getSelectedRow() == -1) {
        JOptionPane.showMessageDialog(null, "First Select A Row To Be Edited");
    } else {
        if (jTextIncident.getText().isEmpty() || jTextFName.getText().isEmpty()
                || jTextLName.getText().isEmpty() || jTextTime.getText().isEmpty()
                || jTextDate.getText().isEmpty() || jTextInvolved.getText().isEmpty()
                || jTextAreaLocation.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The data is Already Saved!");
        } else {
            String id = jTableIncidentName.getValueAt(jTableIncidentName.getSelectedRow(), 0).toString();
            String Query = "UPDATE student_registration SET incident = ?, firstName = ?, lastName = ?, Gender = ?, Time = ?, Date = ?, Involved = ?, Location = ? WHERE id = ?";
            
            if (!incidentExist(jTextIncident.getText())) {
                try {
                    ps = MyConnection.getConnection().prepareStatement(Query);
                    ps.setString(1, jTextIncident.getText());
                    ps.setString(2, jTextFName.getText());
                    ps.setString(3, jTextLName.getText());
                    ps.setString(4, gender);
                    ps.setString(5, jTextTime.getText());
                    ps.setString(6, jTextDate.getText());
                    ps.setString(7, jTextInvolved.getText());
                    ps.setString(8, jTextAreaLocation.getText());
                    ps.setString(9, id);
                    
                     int result = ps.executeUpdate();
                     
                     if(result>0){
                         System.out.println("Sucess");
                          JOptionPane.showMessageDialog(null, "The data is Saved Successfully!");
                     } else{
                         System.out.println("Failed to update");
                     }
                     
                     
                    populateStudentTable();
                } catch (Exception e) {
                    System.out.print(e.getMessage());
                }
            }
        }
    }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    public void DeletePreEditedRowFromTable (){
        DefaultTableModel model = (DefaultTableModel) jTableIncidentName.getModel();
        model.removeRow(jTableIncidentName.getSelectedRow());
    }
        



    private void jButtonRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegisterActionPerformed

    String incident = jTextIncident.getText().trim();
    String firstName = jTextFName.getText().trim();
    String lastName = jTextLName.getText().trim();
    String time = jTextTime.getText().trim();
    String DateText = jTextDate.getText().trim();
    String involved = jTextInvolved.getText().trim();
    String location = jTextAreaLocation.getText().trim();
  

    
 
java.sql.Time sqltime = null;
try {
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm a");
    
} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Invalid Time Format. Please use hh:mm a (e.g., 12:00 am).", "Time Format Error", JOptionPane.WARNING_MESSAGE);
    return;
}

// then inside your database insert block:



    
    
    if (incident.isEmpty() || firstName.isEmpty() || lastName.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please Enter Incident, First Name, and Last Name.", "Alert", JOptionPane.WARNING_MESSAGE);
        return;
    }
    if (DateText.isEmpty() || involved.isEmpty() || location.isEmpty() || time.isEmpty ()) {
        JOptionPane.showMessageDialog(null, "Please Enter all  details (Time., Involved, Location, Date.)", "Alert", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (involved.isEmpty()) {
       
        return;
         }

    Date sqlDate = null;
    try {
        sqlDate = Date.valueOf(DateText);
    } catch (IllegalArgumentException e) {
        JOptionPane.showMessageDialog(null, "Invalid Date Format. Please use YYYY-MM-DD (e.g., 1991-02-19).", "Date Format Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    boolean incidentExists = false;
    try (Connection connCheck = MyConnection.getConnection();
         PreparedStatement psCheck = connCheck.prepareStatement("SELECT id FROM student_registration WHERE incident  = ?")) {
        psCheck.setString(1, incident);
        try (ResultSet rs = psCheck.executeQuery()) {
            if (rs.next()) {
                incidentExists = true;
            }
        }
    } catch (SQLException ex) {
        Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "An error occurred while checking incident. Please try again.", "Database Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (incidentExists) {
        JOptionPane.showMessageDialog(null, "Student ID already exists! Please use a different ID.", "Duplicate ID", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String query = "insert into student_registration(incident , firstname, lastname, gender, time, date, involved, location) values(?,?,?,?,?,?,?,?)";

    try (Connection conn = MyConnection.getConnection();
         PreparedStatement ps = conn.prepareStatement(query)) {

        ps.setString(1, incident);
        ps.setString(2, firstName);
        ps.setString(3, lastName);
        ps.setString(4, gender);
        ps.setString(5,   time);
        ps.setDate  (6, sqlDate);
        ps.setString(7, involved);
        ps.setString(8, location);

        int rowsAffected = ps.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Incident Registered Successfully!");
            RegisterTable();

            jTextIncident.setText("");
            jTextFName.setText("");
            jTextLName.setText("");
            jTextTime.setText("");
            jTextDate.setText("");
            jTextInvolved.setText("");
            jTextAreaLocation.setText("");
            
          
            populateStudentTable();
        } else {
            JOptionPane.showMessageDialog(null, "An error occurred: No student record was added. Please check your data.", "Registration Failed", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException ex) {
        Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "Database Error: Cannot store data at this time. " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "An unexpected error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButtonRegisterActionPerformed
//============================Some Functions====================================
    public String RadioButton(){
        if(jRadioButtonM.isSelected())
            return jRadioButtonM.getText();
        else
            return jRadioButtonF.getText();
    }
    
    private Object RegisterTable(){
        DefaultTableModel model = (DefaultTableModel) jTableIncidentName.getModel();
       model.addRow(new Object[]{
           jTextIncident.getText(),
           jTextFName.getText(),
           jTextLName.getText(),
           RadioButton(),
           jTextTime.getText(),
           jTextDate.getText(),
           jTextInvolved.getText(),
           jTextAreaLocation.getText()           
       });
       return 0;
    }
    //==========================================================================
    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
        
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    private void jTableIncidentNameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTableIncidentNameAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableIncidentNameAncestorAdded

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        
        
        DefaultTableModel model = (DefaultTableModel) jTableIncidentName.getModel();
        
        int selectedRow = jTableIncidentName.getSelectedRow();
        if(selectedRow == -1){
            if(jTableIncidentName.getRowCount()==0){
                JOptionPane.showMessageDialog(null, "No Incident has been Selected",
                        "Alert!", JOptionPane.WARNING_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Select the incident to be Deleted",
                        "Incident Records System", JOptionPane.WARNING_MESSAGE);
}
        } else  {     
          
            
            String incident = jTableIncidentName.getValueAt(selectedRow, 0).toString();
            try{
             String query = "DELETE FROM student_registration WHERE id = ?";
             PreparedStatement ps = MyConnection.getConnection().prepareStatement(query);
             ps.setString(1,incident);
            ps.executeUpdate();
            ps.close();
            
            model.removeRow(selectedRow);
            JOptionPane.showMessageDialog(null,"Record deleted!");
            }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Can Not Delete At this Moment! Try Later"+e.getMessage());
            }
            populateStudentTable();
        }
    }//GEN-LAST:event_jButtonAddActionPerformed
    
    private void jTextInvolvedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextInvolvedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextInvolvedActionPerformed

    private void jTextInvolvedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextInvolvedKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextInvolvedKeyTyped

    private void jTextFNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFNameActionPerformed

    private void jTextFieldSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSearchFocusGained
        if(jTextFieldSearch.getText().trim().toLowerCase().equals("search")){
            jTextFieldSearch.setText("");
            jTextFieldSearch.setForeground(Color.black);
            
        }
    }//GEN-LAST:event_jTextFieldSearchFocusGained

    private void jTextFieldSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSearchFocusLost
        if(jTextFieldSearch.getText().trim().equals("")||
                jTextFieldSearch.getText().trim().toLowerCase().equals("search"))
            jTextFieldSearch.setText("Search");            
            jTextFieldSearch.setForeground(new Color(153,153,153,153));
            
    }//GEN-LAST:event_jTextFieldSearchFocusLost
       
    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
               
         if(jTableIncidentName.getSelectedRow()==-1)
    JOptionPane.showMessageDialog(null,"Please Select a Row to Edit!");
    else{
        jTextIncident.setText(jTableIncidentName.getValueAt(jTableIncidentName.getSelectedRow(), 1).toString());
        jTextFName.setText(jTableIncidentName.getValueAt(jTableIncidentName.getSelectedRow(), 2).toString());
        jTextLName.setText(jTableIncidentName.getValueAt(jTableIncidentName.getSelectedRow(), 3).toString());
        jTextTime.setText(jTableIncidentName.getValueAt(jTableIncidentName.getSelectedRow(), 5).toString());
        jTextDate.setText(jTableIncidentName.getValueAt(jTableIncidentName.getSelectedRow(), 6).toString());
        jTextInvolved.setText(jTableIncidentName.getValueAt(jTableIncidentName.getSelectedRow(), 7).toString());
        jTextAreaLocation.setText(jTableIncidentName.getValueAt(jTableIncidentName.getSelectedRow(), 8).toString());
        
        gender = jTableIncidentName.getValueAt(jTableIncidentName.getSelectedRow(), 4).toString();
        
        if ("Male".equals(gender)){
            
            jRadioButtonM.setSelected(true);
            return;
        }
        jRadioButtonF.setSelected(true);
        
}
        
    }//GEN-LAST:event_jButtonEditActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        try {
            String registerQuery ="SELECT * From student_registration";
            DefaultTableModel modele = (DefaultTableModel) jTableIncidentName.getModel();        
            ps = MyConnection.getConnection().prepareStatement(registerQuery);
            rs = ps.executeQuery();
            while(rs.next()){
            Object o[]= {rs.getString("incident"), rs.getString("firstName"), rs.getString("lastName")
                    ,rs.getString("Gender"),  rs.getString("Time")
                    ,rs.getString("Date"), rs.getString("Involved"), rs.getString("Location")};
            if(jTableIncidentName.getRowCount()!= getRowNumber())    
            modele.addRow(o);    
            }
            }catch(SQLException ex){
              Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_formWindowOpened

    private void jButtonRegisterMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonRegisterMouseEntered
        jButtonRegister.setBackground(Color.BLACK);
        jButtonRegister.setForeground(Color.white);
    }//GEN-LAST:event_jButtonRegisterMouseEntered

    private void jButtonRegisterMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonRegisterMouseExited
        jButtonRegister.setBackground(Color.white);
        jButtonRegister.setForeground(Color.black);
    }//GEN-LAST:event_jButtonRegisterMouseExited

    private void jButtonAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddMouseEntered
        jButtonAdd.setBackground(Color.black);
        jButtonAdd.setForeground(Color.white);
    }//GEN-LAST:event_jButtonAddMouseEntered

    private void jButtonAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddMouseExited
        jButtonAdd.setBackground(Color.white);
        jButtonAdd.setForeground(Color.black);
    }//GEN-LAST:event_jButtonAddMouseExited

    private void jButtonUpdateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonUpdateMouseEntered
        jButtonUpdate.setBackground(Color.black);
        jButtonUpdate.setForeground(Color.white);
    }//GEN-LAST:event_jButtonUpdateMouseEntered

    private void jButtonUpdateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonUpdateMouseExited
        jButtonUpdate.setBackground(Color.white);
        jButtonUpdate.setForeground(Color.black);
    }//GEN-LAST:event_jButtonUpdateMouseExited

    private void jButtonEditMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEditMouseEntered
        jButtonEdit.setBackground(Color.black);
        jButtonEdit.setForeground(Color.white);
    }//GEN-LAST:event_jButtonEditMouseEntered

    private void jButtonEditMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEditMouseExited
        jButtonEdit.setBackground(Color.white);
        jButtonEdit.setForeground(Color.black);
    }//GEN-LAST:event_jButtonEditMouseExited

    private void jRadioButtonFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFActionPerformed
        // TODO add your handling code here:
        gender="Female";
    }//GEN-LAST:event_jRadioButtonFActionPerformed

    private void jTextTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextTimeActionPerformed

    private void jTextFieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyReleased
       
    }//GEN-LAST:event_jTextFieldSearchKeyReleased

     private void populateStudentTable() {
             System.out.println("populateStudentTable() called!");
    model.setRowCount(0); // Clear the table model
    studentList.clear(); // Clear the student list

    // Corrected SQL query
    String selectQuery = "SELECT id, incident, firstname, lastname, gender, time AS date , date AS time, involved, location FROM student_registration";

    try (Connection conn = MyConnection.getConnection();
         PreparedStatement ps = conn.prepareStatement(selectQuery);
         ResultSet rs = ps.executeQuery()) {

        // Fetch data from the result set
        while (rs.next()) {
            String studentId = rs.getString("id");
            String incident = rs.getString("incident");
            String firstName = rs.getString("firstname");
            String lastName = rs.getString("lastname");
            String studentGender = rs.getString("gender"); 
            String time = rs.getString("time");
            String date = rs.getString("date");
            String involved = rs.getString("involved");
            String location = rs.getString("location");

            // Create a StudentModel object and add it to the list
            StudentModel student = new StudentModel(
                studentId,
                incident,
                firstName,
                lastName,
                studentGender,
                time,
                date,
                involved,
                location
            );
            studentList.add(student);
        }

        // Populate the table model with student data
        for (StudentModel student : studentList) {
            Object[] studentObj = {
                student.getId(),
                student.getStudentNumber(),
                student.getFirstname(),
                student.getLastname(),
                student.getGender(),
                student.getTime(),
                student.getDate(),
                student.getInvolved(),
                student.getLocation(),
            };
            model.addRow(studentObj);
        }

    } catch (SQLException ex) {
        Logger.getLogger(Incident.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error fetching student data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}
    public int getRowNumber(){//============start===============

    int numberRow = 0;
    PreparedStatement ps;
    ResultSet rs;
    String query = "select count(*) from student_registration";
        try{
            ps = MyConnection.getConnection().prepareStatement(query);
            rs = ps.executeQuery();
            while(rs.next()){
                numberRow = rs.getInt("count(*)");
            }
        }
        catch (SQLException ex){
            JOptionPane.showMessageDialog(null,"Error ");
        }
    return numberRow;
}//===========================end================================
   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Incident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Incident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Incident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Incident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Incident().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonRegister;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButtonF;
    private javax.swing.JRadioButton jRadioButtonM;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    public javax.swing.JTable jTableIncidentName;
    private javax.swing.JTextArea jTextAreaLocation;
    private javax.swing.JTextField jTextDate;
    private javax.swing.JTextField jTextFName;
    private javax.swing.JTextField jTextFieldSearch;
    private javax.swing.JTextField jTextIncident;
    private javax.swing.JTextField jTextInvolved;
    private javax.swing.JTextField jTextLName;
    private javax.swing.JTextField jTextTime;
    // End of variables declaration//GEN-END:variables

    
    }

